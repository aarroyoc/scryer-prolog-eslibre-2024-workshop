#+TITLE: Introducción a la programación lógica con Scryer Prolog
#+AUTHOR: Adrián Arroyo Calle
#+EMAIL: aarroyoc@adrianistan.eu
#+DATE: Mayo 2024
#+LANGUAGE: es
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+latex_header: \mode<beamer>{\usetheme{JuanLesPins}}

* Introducción

** ~$whoami~

*** 
:PROPERTIES:
:BEAMER_col: 0.6
:END:
- Adrián Arroyo Calle
- aarroyoc@adrianistan.eu
- [[https://castilla.social/@aarroyoc][@aarroyoc@castilla.social]]
- [[https://adrianistan.eu][https://adrianistan.eu]]
- Desarrollador backend en Telefónica Innovación Digital
- Colaborador en Scryer Prolog

*** 
:PROPERTIES:
:BEAMER_col: 0.4
:END:
#+ATTR_LaTeX: :width \textwidth
[[file:Adrian.jpg]]

* ¿Qué es la programación lógica?

** 
¿No es todo tipo de programación un *pensamiento lógico*?

¿Cuál es la diferencia entonces entre la *programación lógica* y el resto de tipos?

** Paradigmas de programación

En programación existen diferentes paradigmas. En cada paradigma tenemos que pensar de forma diferente.

- Programación imperativa
  - Fundamento teórico: la máquina de Turing.
  - Lenguajes: C, Pascal, Go, ...
- Programación funcional
  - Fundamento teórico: el cálculo lambda de Alonzo Church.
  - Lenguajes: Haskell, Scheme, Idris, ...
- Programación lógica
  - Fundamento teórico: la lógica de predicados.
  - Lenguajes: *Prolog*, Mercury, ...

Adicionalmente tendríamos otros paradigmas como *concatenativo*, *arrays* y paradigmas /complementarios/ como
orientado a objetos y reactivo.

** Lógica de Aristóteles

El primer tratamiento sofisticado de la lógica lo encontramos en Aristóteles, con su Órganon.
La idea fundamental es que existen proposiciones, que son sentencias que pueden ser ciertas o falsas. Se dan tres axiomas:
- Principio de no contradicción
- Principio de identidad
- Principio del tercero excluido

Mediante el silogismo podemos obtener conocimiento deductivo (razonando). En contraposición existe el conocimiento
inductivo (mediante la experiencia, típico de la ciencia).

** Lógica de predicados

La lógica de Aristóteles fue muy estudiada durante la Edad Media por árabes y cristianos.

Pero posteriormente fueron encontrándose limitaciones. Un estudio más sistemático fue necesario.

La lógica de predicados añade expresividad, al introducir el concepto de *variables*.

** Ejemplo

- Sócrates es humano.
- Todos los humanos son mortales.

Definimos:
- H(x) : X es humano
- M(x) : X es mortal
- soc : Sócrates

Lógica:

\begin{equation}
H(soc)
\end{equation}
\begin{equation}
\forall x \, H(x) \implies M(x)
\end{equation}

Deducimos $M(soc)$ por modus ponens.

* Prolog

** Sócrates en Prolog

*** Código
#+begin_src prolog
human(socrates).
mortal(X) :- human(X).
#+end_src

*** Terminal

#+begin_src shell
  scryer-prolog socrates.pl
  ?- mortal(socrates).
     true.
  ?- mortal(X).
     X = socrates.
#+end_src

** Prolog

- Prolog nació en 1972 en Marsella (Francia) de la mano de Alain Colmerauer, Philippe Roussel y Bob Kowalski.
- Estandarizado como ISO Prolog en 1995.
- Existen multitud de implementaciones, académicas, software libre, privativas, etc
  - Actualmente la implementación más balanceada en cuanto a funcionalidad, rendimiento y soporte a estándares es SICStus Prolog, software privativo.

** 
- La idea fundamental es usar la lógica de predicados, aunque simplificada en ciertos puntos.
- Los programas son bases de conocimiento que realizan un cómputo al razonar sobre algo que pidamos.
- Prolog es /backward-chaining/, hay que indicarle primero lo queremos probar. Y Prolog lo intentará probar.
- Prolog es Turing-completo. Es decir, misma potencia expresiva que lenguajes como C, JavaScript o Haskell.

** Scryer Prolog

***                                                                   :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:

- Scryer Prolog es un sistema ISO Prolog de *software libre* y *comunitario*.
- Escrito en Rust y Prolog.
- Todavía en versión /beta/, pero compatible con multitud de librerías.
- El objetivo es ser una implementación correcta y eficiente, en ese orden.
- Windows/macOS/Linux/WASM
- https://www.scryer.pl
  
***                                                                   :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+ATTR_LATEX: :width \textwidth
[[file:scryer.png]]


** ¿Cómo usar Scryer Prolog?

- Scryer Prolog está disponible en los repos de algunas distros: NixOS, Alpine Linux, Arch Linux (AUR), Void Linux, ...
- Versiones precompiladas en https://www.scryer.pl
- Playground online en https://play.scryer.pl (/beta/ y demasiado lento todavía)

** Sintaxis de Prolog
- Los átomos empiezan por letra minúscula. Solo son iguales a ellos mismos.

  #+begin_src prolog
  ?- valencia = valencia.
     true.
  ?- madrid = valencia.
     false.
  #+end_src

** Sintaxis de Prolog
# Explicar esto con ejemplos interactivos

- Las variables lógicas empiezan por letra mayúscula. Pueden adoptar cualquier valor, incluso otra variable.
  Pero solamente una vez. Se parecen más a las variables de álgebra que a las de un lenguaje imperativo.

  #+begin_src prolog
  ?- X = valencia.
     X = valencia.
  ?- X = valencia, X = madrid.
     false.
  #+end_src

** Sintaxis de Prolog
- Los términos compuestos se basan en un átomo y a continuación entre paréntesis, N términos más.
- Variables, átomos y compuestos son términos.

#+begin_src prolog
  ?- X = persona(adrian, valladolid).
     X = persona(adrian, valladolid).
  ?- persona(N, C) = persona(adrian, valladolid).
     N = adrian, C = valladolid.
  ?- persona(N, valladolid) = persona(adrian, C).
     N = adrian, C = valladolid.
#+end_src

** Sintaxis de Prolog
- En Prolog cada definición acaba con un punto.
- Si solo hay un término, esa definición es un /fact/ o hecho.

#+begin_src prolog
  ?- [user].
  ciudad(valencia).
  ciudad(madrid).
  ?- ciudad(valencia).
     true.
  ?- ciudad(X).
     X = valencia
  ; ... .
#+end_src

** Sintaxis de Prolog

- Si existe una implicación, esa definición es una regla.
- El conjunto de definiciones con el mismo átomo inicial y mismo número de argumentos (aridad) se llama *predicado*.

#+begin_src prolog
?- [user].
dark_mode.
background_color(black) :- dark_mode.

?- background_color(black).
   true.
#+end_src

** Sintaxis de Prolog

- Dentro de una regla, podemos combinar predicados con , (AND) y ; (OR).

#+begin_src prolog
?- [user].
autorizado(DNI) :-
    mayor_de_edad(DNI) ;
    (menor_de_edad(DNI), autorizacion_paterna(DNI)).
#+end_src

** Semántica de Prolog

- La semántica de Prolog se basa en dos operaciones que ya hemos intuido:
  - La *unificación*
  - El *no determinismo*
  
** Unificación

- Se trata de conseguir que dos términos sean iguales.
- Se aplican comprobaciones de igualdad, pero también sustitución de variables.
- Se aplica tanto con ~=~ como al buscar predicados en el programa.

#+begin_src prolog
?- 10 = 10.
   true.
?- X = 10.
   X = 10.
?- X = Y.
   X = Y.
?- f(A, 10) = f(A, A).
   A = 10.
#+end_src

** 

#+begin_src prolog
?- [user].
   print_msg(X) :- write(X).
?- print_msg(valladolid).
valladolid   true.
#+end_src

** No determinismo

- Tanto en los OR (;) como en predicados con diferentes reglas/hechos, Prolog tiene que tomar una decisión de cuál
  es el siguiente paso.
- Estos puntos se llaman /choicepoints/. Prolog los almacena. Si queremos otra solución o si el camino que hemos tomado falla, Prolog vuelve atrás.

#+begin_src prolog
?- [user].
a(10).
a(20).
a(30).

?- a(X).
   X = 10
;  X = 20
;  X = 30.
#+end_src

** Grafo de viajes

Tenemos un listado de precios de vuelos entre aeropuertos. ¿Cómo lo podemos expresar en Prolog?

** 

#+begin_src prolog
vuelo(mad,bcn,200).
vuelo(bcn,mad,100).
vuelo(bcn,vll,30).
vuelo(vll,bcn,30).
vuelo(mad,vlc,50).
vuelo(vlc,mad,50).
#+end_src

** 

Si el vuelo que buscamos es justo el trayecto que tenemos registrado, funcionará perfectamente.
Pero no funcionará si necesitamos hacer escala.

**  

#+begin_src prolog
vuelo(X, Y, Precio) :-
    vuelo(X, Z, P1),
    vuelo(Z, Y, P2),
    Precio #= P1+P2.
#+end_src

Añadimos una regla al predicado, en el cual, de nuestro origen vamos a un destino Z y desde ese destino Z buscamos vuelo hasta el destino real Y.

¡Puede ser recursivo!

**  

¿Y si quiero calcular la ida y vuelta?

** 

#+begin_src prolog
idavuelta(X, Y, Precio) :-
    vuelo(X, Y, P1),
    vuelo(Y, X, P2),
    Precio #= P1+P2.
#+end_src


* Listas y aritmética

** Listas
- Prolog tiene un gran soporte a listas, aunque no son un tipo de dato fundamental.
- Entre corchetes. Podemos acceder al primer elemento con ~[H|T]~

#+begin_src prolog
?- [1,2,3,4] = [H|T].
   H = 1, T = [2,3,4].
#+end_src

** member/2

- ~member(X, L)~ es verdadero si X es un elemento de L.
  #+begin_src prolog
  ?- member(X, [1,2,3]).
     X = 1
  ;  ... .
  ?- member(2, [1,2,3]).
     true
  ;  ... .
#+end_src

** length/2

- ~length/2~ es el predicado que nos permite obtener el número de elementos de una lista
- ¡Y también construir listas de N elementos! Es bidireccional.

#+begin_src prolog
?- length([1,2,3], N).
   N = 3.
?- length([1,2,3], 3).
   true.
?- length(X, 3).
   X = [_A,_B,_C].
#+end_src

** append/3

- ~append(A, B, AB)~ nos dice que AB es A seguido de B.
- ¡Vuelve la magia de Prolog!

  #+begin_src prolog
  ?- append("abc", "def", X).
   X = "abcdef".
?- append("abc", X, "abcdef").
   X = "def".
?- append(X, XY, "abcdef").
   X = [], XY = "abcdef"
;  X = "a", XY = "bcdef"
;  X = "ab", XY = "cdef"
;  X = "abc", XY = "def"
;  X = "abcd", XY = "ef"
;  X = "abcde", XY = "f"
;  X = "abcdef", XY = [].
#+end_src

** Aritmética con clpz

- La aritmética habitual no respeta las propiedades lógicas de Prolog.
- Existen librerías que nos permiten tenerlo, aunque con algunas limitaciones.

  #+begin_src prolog
?- #X #= 12 + 30.
   X = 42.
?- 42 #= 12 + #X.
   X = 30.
#+end_src


** Zebra
- Cinco hombres de cinco nacionalidades diferentes viven en las primeras cinco casas de una calle. Tienen cinco profesiones diferentes y cada uno tiene un animal y una bebida favorita diferentes. Cada casa está pintada de un color diferente.
- El inglés vive en la casa roja.
- El español tiene un perro.
- El japonés es pintor.
- El italiano bebe té.
- El noruego vive en la primera casa por la izquierda.
- El dueño de la casa verde bebe café.
- La casa verde está a la derecha de la casa blanca.
  
** Zebra 2
- El escultor cultiva caracoles.
- El diplomático vive en la casa amarilla.
- La leche se bebe en la casa de enmedio.
- La casa del noruego está al lado de la casa azul.
- El violinista bebe zumo de frutas.
- El zorro está en una casa al lado de la del doctor.
- El caballo está en una casa al lado de la del diplomático.

** Zebra 3

- ¿Quién tiene una cebra?
- ¿Quién bebe agua?

** Zebra

#+begin_src prolog
zebra(Sol) :-
    Sol = [
	% casa(Color, Nacio, Prof, Animal, Bebida),
	casa(C1, N1, P1, A1, B1),
	casa(C2, N2, P2, A2, B2),
	casa(C3, N3, P3, A3, B3),
	casa(C4, N4, P4, A4, B4),
	casa(C5, N5, P5, A5, B5)
    ],
#+end_src

** Zebra

- Primer tipo de condiciones

#+begin_src prolog
    member(casa(roja, ingles, _, _, _), Sol),
    member(casa(_, español, _, perro, _), Sol),
    member(casa(_, japones, pintor, _, _), Sol),
    member(casa(_, italiano, _, _, te), Sol),
#+end_src

** Zebra

- Noruego al principio de las casas

#+begin_src prolog
    Sol = [casa(_, noruego, _, _, _)|_],
    #+end_src

** Zebra

- Verde a la derecha de blanca
#+begin_src prolog
   append(_, [
	      casa(blanca, _, _, _, _),
	      casa(verde, _, _, _, _)|_], Sol),
    #+end_src

** Zebra

- Leche en la casa de enmedio

#+begin_src prolog
    append(X, [casa(_, _, _, _, leche)|Y], Sol),
    length(X, 2),
    length(Y, 2),
#+end_src

** Zebra

- X al lado de Y

#+begin_src prolog
next_to(X, Y, Sol) :-
    append(_, [X,Y|_], Sol).
next_to(X, Y, Sol) :-
    append(_, [Y,X|_], Sol).
#+end_src

#+begin_src prolog
    next_to(
	casa(_, noruego, _, _, _),
	casa(azul, _, _, _, _), Sol),
#+end_src

** Zebra solución

#+begin_src prolog
?- zebra(Sol), member(casa(_, X, _, cebra, _), Sol).
   X = japones.
#+end_src

** KenKen

#+ATTR_LATEX: :width \textwidth
[[file:kenken.jpg]]

** KenKen

- Rellenar con dígitos de 1 a 4.
- No se puede repetir el dígito en una fila/columna.
- Los dígitos que forman parte de una caja, deben dar el número indicado, tras hacer la operación indicada entre ellos.

** KenKen

- Aritmética en Prolog. Usaremos ~clpz~.
- Lo primero es definir la estructura de datos del tablero.
- Una elección que tendrá mucha influencia en el código posterior.
- Debe incluir al menos una variable para cada posición del tablero.

** KenKen
#+begin_src prolog
:- use_module(library(clpz)).
:- use_module(library(lists)).

clpz:monotonic.
#+end_src

** KenKen
#+begin_src prolog
gen_kenken_board(Board) :-
    length(Rows, 4),
    maplist(same_length(Rows), Rows),
    Board = kenken(4, Rows,
		   [
		       box(8, sum, [1-1, 2-1, 2-2]),
		       box(9, sum, [3-1, 3-2, 4-2]),
		       box(1, [4-1]),
		       box(2, sub, [1-2, 1-3]),
		       box(7, sum, [2-3, 3-3, 3-4]),
		       box(6, sum, [4-3, 4-4]),
		       box(1, sub, [1-4, 2-4])
		   ]).
#+end_src

** KenKen

- Ahora necesitamos el solver, al que le pasamos un tablero.

** KenKen

#+begin_src prolog
kenken(Board) :-
    Board = kenken(Size, Rows, Boxes),
    append(Rows, Vs),
    Vs ins 1..Size,
#+end_src

** KenKen

#+begin_src prolog
    maplist(all_different, Rows),
#+end_src


** KenKen
#+begin_src prolog
    transpose(Rows, Columns),
    maplist(all_different, Columns),
#+end_src

** KenKen
#+begin_src prolog
    maplist(box_restriction(Vars), Boxes),
#+end_src

** KenKen

#+begin_src prolog
  box_restriction(Vars, box(Target, [X-Y])) :-
      cell(Vars, X-Y, Cell),
      #Cell #= #Target.

#+end_src

** 
#+begin_src prolog
	box_restriction(Vars, box(Target, sum, Nums)) :-
	    maplist(cell(Vars), Nums, Cells),
	    sum(Cells, #=, Target).

#+end_src

** 
#+begin_src prolog  
	box_restriction(Vars, box(Target, sub, Nums)) :-
	    maplist(cell(Vars), Nums, Cells),
	    Cells = [A, B],
	    #\(#A - #B #= #Target, #B - #A #= #Target).
#+end_src

** KenKen

#+begin_src prolog
cell(Vars, X-Y, Cell) :-
    nth1(Y, Vars, Row),
    nth1(X, Row, Cell).
#+end_src

** KenKen

#+begin_src prolog
    labeling([ffc], Vs).
#+end_src

** KenKen

#+ATTR_LATEX: :width \textwidth
[[file:kenken.png]]

** Sudoku

- ¿Podrías implementar un solver de Sudoku de forma parecida?

** FIN

¿Fin?
